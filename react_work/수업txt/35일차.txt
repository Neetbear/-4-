리덕스?
예전에는 리액트에 리듀서라는게 없었는데 같이 쓰게되면서 생긴거

리덕스는 리액트형 고급 상태관리 라이브러리 
    구성 컴포넌트수준에서의 관리만 지원 

    크고 복잡한 응용프로그램에서는 많은 수의 컴포넌트가 사용되는데 
    리액트는 상태를 최상위 컴포넌트 엘리먼트로 전달해서 원하는 곳에 전달하는 과정을 거친다.
     -> 리액트의 데이터 흐름은 단방향

    리액트 리덕스를 사용하면 애플리케이션수준에서 상태를 유지하는데 도움이 되고 
    모든 컴포넌트가 언제든지 스태이트에 접근할수 있게 된다
        -> 리덕스를 사용하면, 상태값을 컴포넌트에 종속시키지 않고, 상태관리를 바깥에서 할 수 있게 해준다고 한다
    
    이미지 파일 참고

리액트에서 사용되는 키워드
    액션(action)
        {
            type:"Toggle_value"
        }
    
    액션생성함수(action creator) 
        나중에 컴포넌트에서 쉽게 action을 발생시키기 위해서 사용한다 
        export const changeInput = text => {
            type:"changeInput",
            text
        } 
    
    리듀서(reducer) 
        현재의 상태와 액션을 받아서 액션에 맞는 함수를 진행햐여 새로운 상태를 반환한다
        function reducer(state, action) =>{
            return alteredState;
        }

    리덕스를 사용할때는 여러개의 리듀서를 만들기도 한다 이미지 참고

    스토어(store)
        리덕스에서는 한 애플리케이션당 하나의 스토어를 만들게 됩니다. 스토어 안에서, 현재의 앱 상태와,
        리듀서가 들어가 있고, 추가적으로 몇가지 내장 함수들이 있습니다.
    
    디스패치(dispatch)
        디스패치는 스토어의 내장함수 중 하나
        액션을 발생시키기 위한 부분이라고 생각하면 된다.
        디스패치가 리듀서에 액션을 던져주면 진행된다고 생각하면 된다.

    구독(subscribe)
        스토어 내장 함수 중에 하나
        함수 형태의 값을 파라미터로 받아온다 
        구독함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을때마다 전달해준 함수가 호출된다.
        콜백함수 느낌
        리액트에서 리덕스를 사용하게 될 때 이 함수를 직접 사용하는 일은 거의 없다
    
    리덕스의 3가지 규칙    
        하나의 애플리케이션안에는 하나의 스토어
        상태는 읽기 전용
        리듀서는 순수하게 함수여야한다.

npm install -s redux

provider로 app을 감싸면 어떤 컴포넌트라도 store에 접근할수 있게 된다

폴더 구조 잘보기 
    보여줄 아이
    기능부분
    합쳐주는부분

npm install -s redux-devtools-extension ?