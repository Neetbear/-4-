7일차 
자바스크립트 시작

javascipt
    객체기반의 스크립트 언어
    head 내부에 쓰거나 링크 가져오거나 바디에도 작성가능 (css랑 비슷)
    
    자바스크립트는 웹의 동작을 구현
    주로 Node.js와 같은 프레임워크를 사용 
    프론트엔드 전용이다
    자바스크립트 구조는 c언어나 자바와 비슷 (html과 css와의 차이)    
    동적인 언어 타입을 명시할 필요가 없는 인터프리터 언어 
    객체지향 프로그래밍과 함수형 프로그래밍 모두 표현 가능
    html의 내용, 속성, 스타일을 변경 할 수 있다 
    이벤트를 처리하고 사용자와의 상호작용을 가능하게 함
    Ajax 기술을 이용해 서버와 실시간 통신 기능 제공   


    %인터프리터 (크롬 같은 웹브라우저에는 크롬인터프리터가 내장되어 있다)
        컴파일러를 거쳐서 기계어로 변환되지 않고 바로 실행되는 프로그래밍 언어 -> .exe 파일이 가능하다?
        문법적인 오류 있어도 실행은 됨

            %컴파일러(compiler, 순화 용어: 해석기, 번역기)
                특정 프로그래밍 언어로 쓰여 있는 문서를 다른 프로그래밍 언어로 옮기는 언어 번역 프로그램

    %AJAX si업체가 많이 씀 -> 대기업 파견다니는 사원
        ajax 는 비동기 처리라고 브라우저 상에서 '분업을 하게 해주는' 작동방식입니다. 
        그래서 웹브라우저가 용량이 커도 렉걸리지 않고 바로 바로 렌더링돼요

    %자바 vs 자바스크립트 
        두 언어다 c언어 기반이라 문법상은 비슷
        자바는 컴파일 언어/ 타입 검사를 엄격하게 함/ 클래스 기반의 객체지향언어(자바스크립트는 프로토타입기반 ->텍스트로쓴다)

    %하이브리드 앱 -> 껍데기는 앱인데 내용물은 웹페이지
    
    %프레임워크 vs 라이브러리 = 기본 개념 구조 (틀) vs 도구의 모음 (공구)
        프레임워크 : 특정 프로그램을 개발하기 위한 여러 요소들과 메뉴얼인 룰을 제공하는 프로그램 -> react로 배울거임
        라이브러리 : 프로그램을 개발하기 위해 쓰는 공구와 같은 도구들

    %타입이란 int 123,  string Hello - 이렇게 실제 데이터 앞에 데이터가 뭐다 라고 알려주는 표기입니다.

    %런타임 : 프로그램이 실행되고 있는 동안의 동작
        node.js로 배움
        Node.js는 쉽게 말하면 웹브라우저 밖에서 자바스크립트를 사용할 수 있게 해주는 '플랫폼' 이에요
            node.js는 싱글 스레드 임

    %restful API 
        CRUD 연산에 대한 요청을 할 때, 요청을 위한 Resource(자원, URI)와 이에 대한 Method(행위, POST) 
        그리고 Representation of Resource(자원의 형태, JSON)을 사용하면 표현이 명확해지므로 이를 REST라 하며, 
        이러한 규칙을 지켜서 설계된 API를 Rest API 또는 Restful한 API라고 합니다.
            %crud : Create, Read, Update, Delete



    내부 javascipt
        head 나 body 에 작성 
        공통된 기능을 만들기 어렵고 코드의 재활용이 어렵다

        head에 드가면 브라우저 렌더링에 방해가 될 수 있다.
            문서의 DOM 구조가 필요한 경우 HTML이 모두 로드 된 이후 실행되어야 하므로 window.onload 필요가
        body에 드가면 복잡해지지만 head 같은 문제는 안생김

    외부 javascipt
        .js로 만들고 <sript src=""> </script>
        
    비교적 간단한 경우만 내부에

    변수와 자료 형
        자바스크립트는 다른 언어와 다르게 자료 형이 고정 안됨
        내부적으로는 기본형(primitive)과 객체형(object)이 있음 

        primitive
            boolean : true, false
            null :빈값
            undifined : 값을 할당하지 않은 변수가 가지는 값
            Number : 정수, 부동 소수점, 무한대, NAN
            string
        object
            Reference
            클래스 뿐 아니라 배열, 함수, 사용자정의 클래스도 object
            JSON
                
            %JSON   
                속성-값 쌍 또는 "키-값 쌍"으로 이루어진 데이터 오브젝트를 전달하기 위해 
                인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷    

            %Reference
            memory <- Var abc = initiallize; 
                memory -> Excute  메모리에서 꺼내다가 실행하는게 Reference 타입

    변수 선언 -> html의 id나 class와는 다르다
        이름은 대소문자 구별
        여러 변수를 한번에 선언 가능
        지역 변수 / 전역 변수 -> 중괄호 기준 중괄호는 {}임
            지역 local 
            전역 global
        Camel Case 소문자로 시작되는 방식

        식별자 (= 변수) 작성 방식
            Camel Case 소문자로 시작 -> 관행적으로 사용
            Underscore Case _로 시작

        var, let, const
            var 지역변수 개념 함수범위에서 유효
                선언안하면 자동으로 전역변수
                var만 중복선언 가능
                함수레벨 스코프 함수를 제외한 영역에서 선언하면 전역변수 취급
            let (변수)
                let과 var는 재할당 가능
                let은 선언된 {} 안에서만 유효하기에 그 밖을 벗어나서 호출하면 선언이 안됩니다
            const (상수)
                let과 const는 블록레벨 스코프임
                    let, const는 함수 내부는 물론, if문이나 for문 등의 코드 블럭{ ... } 에서 선언된 변수도 지역변수로 취급한다.

        %scope 유효한 참조 범위
        %호이스팅 jvscript는 코드 실행하기 전, 일종의 코드 평가과정을 거친다

    출력
        window.alert() 
            가장 간단한 출력 방법
            팝업창을 이용해서 띄우는 방법

        HTML DOM 요소 이용한 innerHTML property 
            document 객체의 getElementByID() 등의 method를 사용하여 HTML요소를 선택
            innerHTML property를 이용하면 선택된 HTML 요소의 content나 속성 값 등을 손쉽게 변경할 수 있다.
        
        document.write() method
            웹페이지가 로딩될때 실행되면, 웹페이지에 가장 먼저 데이터를 출력한다.
            테스트나 디버깅을 위해 사용
            웹페이지의 모든 내용이 로딩된 후에 실행되면, 웹페이지 내의 모든 데이터를 지우고 사용되므로 주의

        console.log()
            ()안의 변수 출력

    
    타입 = 변수를 저장할때 변수에 저장하는 데이터의 종류와 크기
        원시타입
            숫자 Num e(지수표기법 가능)
            문자열 Str "" ''로 둘러싸인 문자의 집합 
                    숫자와 문자열을 더하면 숫자를 문자열로 자동 변환하여 수행 
            boolean(불리언) true & false
            symbol(심볼) 유일하고 변경할 수 없는 타입 식별자로 사용?
                        값 자체의 확인이 불가하면 외부로 노출되지 않는다
            null 값이 없음, object타입
                메모리에 로딩이 안되었기에 값이 없는 것
            undifined 값이 아니라 타입이 정해지지 않은 것
                초기화되지 않은 변수나 존재하지 않는 값에 접근할 때 반환된다
                    null과 undifined는 ==로 비교할때 다른값

        객체타입
            object(객체)
                기본타입
                객체란 실생활에서 우리가 인식할 수 있는 사물
                여러 property나 method를 같은 이름으로 묶어놓은 일종의 집합체


        타입변환(type conversion)
            변수는 타입이 정해져있지 않으며, 같은 변수에 다른 타입의 값을 다시 대입할 수도 있다.
            타입이 유연

            묵시적 타입 변환 (implicit type conversion)
                특정 타입의 값을 기대하는 곳에 다른 타입의 값이 오면 자동으로 타입을 변환하여 사용한다.
                
            명시적 타입 변환(explicit type conversion)
                명시적으로도 타입을 변환할 방법도 있긴하다.
                Numver() String() Boolean() Object() parselnt() parseFloat()

        숫자를 문자열로 변환 
            toExponential()
            toFixed()
            toPrecision()
        
        문자열을 숫자열로 변환
            parseInt()  문자열 인자를 정수로
            parseInt( ,10) 10진수로 변환 
            parseFloat() 부동소수점 수를 반환

        불리언 값을 문자열로 변환
            String()        

        날짜를 문자열이나 숫자로 변환
            String(Date())
            Date().toString() 등등

            %unix 타임 

        불리언 값을 숫자로 변환 
            Number(true;) true는 숫자 1 false는 숫자 0

    변수의 선언과 초기화
        변수란 데이터를 저장할 수 있는 메모리 공간을 의미, 변경 가능
        var 키워드를 사용하여 변수 선언
        선언되지 않은 변수를 사용하려고 하거나 접근하려고 하면 오류 발생
        선언되지 않은 변수를 초기화할 경우에는 자동으로 선언을 먼저 한 후 초기화를 진행한다
        선언된 변수 나중에 초기화 가능, 선언 후 초기화도 가능

    변수의 타입과 초기 값
        초기화 = 최초에 값을 대입해주기?




















