8일차

변수(식별자, identifier)
    변수는 이름을 가지고 식별
    영문자(대소문자), 숫자, 언더스코어(_)  
    달러($)도 가능하긴한데 명령어가 있어서 혼동가능성이 있으니 사용말것 
    숫자로 시작은 불가
    예약된 키워드는 변수로 사용불가

연산자(operator)
    산술연산자 (사칙연산) 이항연산자(2개의 피 연산자를 가진다)
        +, -, *, /, %(나머지 값)

%연산자의 우선순위(operator precedence)와 결합방향(associativity)
    괄호 우선, 곱셈, 나눗셈 우선 
    산술연산자 같은건 왼쪽에서 오른쪽으로 
    대입은 오른쪽부터 왼쪽으로

%연산자 우선순위는 표 참조

    대입연산자
        변수에 값을 대입(산술연산자와 복합하여 사용가능)
        오른쪽에서 왼쪽으로 작용 -> 오른쪽 피연산자를 왼쪽 피연산자에 대입
        같다는 뜻이 아니다
        =, +=, -=, *=, /=, %=

    증감연산자
        피 연산자를 1씩 증가 혹은 감소 시킬때 사용 
        피 연산자는 하나
        위치에 따라 연산의 순서 및 결과가 달라진다
        값 변화 먼저++x, --x / 연산 수행 후 값 변화 x++, x--

    비교연산자 
        피 연산자 사이의 상대적인 크기를 판단하여 true, false 반환
        결합방향 왼쪽에서 오른쪽
        *둘 다 숫자면 숫자비교
        *둘 다 문자열이면 문자열의 첫 번째 문자부터 알파벳 순서대로 비교
        *비교 할 수 없으면 false 출력
        ==(값비교), ===(값과 타입 비교), !=(다르냐고 묻는거), !==(값이나 타입이 다르면 true), >, >=, <, <=
        ==동등(equal), ===일치(strict equal) -> 타입까지 비교 위해서 === 많이 사용 (==는 형변환때문에 같다고 읽히는 경우 있음)

    논리연산자(logical) -> 이건 자주 쓰임
        논리식 비교하여 true, false 반환
        && 논리식이 모두 true면 true 반환 (and) 
        || 논리식 중에 하나라도 true면 true 반환 (or)
        !  논리식이 true면 false 반환 (not)

    비트연산자(bitwise operator) -> 자바스크립트에선 쓸일 잘 없다 뭔지만 알아두기
        비트 단위로 논리 연산 수행 
        2진수로 되어있는거에 대하여 혹은 전체 비트를 왼쪽이나 오른쪽으로 이동할때 사용
        2진수에선 true를 1이라고 생각하면됨
        비트에선 맨 앞에 비트가 부호를 나타낸다 (1000 0001 이면 +1 / 0000 0001이면 -1)
        &   모두 1이면 1 (and)  
            예)1111 0001 & 1111 0101 -> 1111 0001
        |   하나라도 1이면 1 (or)
        ^   서로 다르면 1 (XOR)
        ~   1이면 0, 0이면 1로 반전 (NOT)
        <<  한칸씩 오른쪽으로 이동 빈자리 채우는건 0 (2진수니까 2 곱한다고 생각하면 됨) 
        >>  한칸씩 왼쪽으로 이동 빈자리 채우는건 0 (2진수니까 2 나눈다고 생각하면 됨)
        >>> 부호 무시?

    기타연산자
        문자열 결합 연산자 (문자열 + 숫자면 숫자가 문자열 되서 문자열로 표기 -> 형변환)
        삼항 연산자(ternary operator)
            표현식 ? 반환값1 : 반환값2 -> 참이면 반환값1출력 거짓이면 반환값2 라는 소리
            if/else 대신에 사용 가능 -> 코드 간단해짐

    쉼표 연산자 
        ,로 구분 for문에서 사용하면 루프마다 여러 변수를 동시에 갱신 가능
        for(i<=j, i++, j--) 이런 식으로 -> for (초항;범위;조건;) {함수작성}

    delete 연산자
        피 연산자인 객체, 객체의 property 또는 element 등을 삭제해준다.
        성공적으로 삭제시 true, 못하면 false 반환
        배열 요소 삭제 -> 배열 길이는 그대로

    typeof 연산자
        타입 반환

    instanceof 연산자
        피연산자의 객체가 특정 객체의 인스턴스인지 아닌지 확인해준다 
        어떤 오브젝트인지 확인해준다?
    %new하면 메모리에 할당된다? -> 그래서 인스턴스라고 부른다 인스턴시에이싱
    %객체를 클래스의 인스턴스라고 부름.

    void 
        어떤 값이 오든지 언제나 undifined만 반환한다 -> 타입이 없다 
        타입 없이 선언하는 용도

제어문

    조건문
        if / else if / else
        삼항연산자
        switch
    
    %순서도 
        내 프로그램은 이렇게 작동할거야 라는걸 기호와 도형으로 도식화 한 것
    
        if문 
            표현식의 결과가 true이면 실행문 실행
            거짓이면 실행 X 
        
        else if문
            if문이 거짓일때 표현식의 결과가 true면 실행문 실행
            거짓이면 실행 X
        
        else 문
            if문, else if문이 거짓일때 실행
        
        switch문
            주어진 조건값에 따라 다른 명령을 수행하도록 하는 조건문
            if/else보다 가독성 좋다
            평가 한번
            표현식의 값은 각각의 case 값고 비교
            일치하는 항목이 있으면 연결된 코드 블록이 실행
            일치하는 항목이 없으면 default 코드 블록이 실행
            코드 블록에서 break;를 안쓰면 다음걸 적용해버림

    반복문(iteration statements)
        루프
        while / do
        for / in / 

        while문 
            특정 조건을 만족할 때까지 계속해서 주어진 실행문을 반복
            거짓되면 while문 빠져나감 -> 도중에 그만두게 할라면 break사용 
            continue 사용시 도중에 다시 조건문으로 올라간다?

        do문
            





















