2일차 

실행파일의 생성
    소스코드 파일은 전처리기 컴파일러 그리고 링커에 의해 실행파일로 변환된다.
    최근 개발툴들은 전처리기 컴파일러 링커 모두 내장하고 있으므로 소스코드파일에서 한번에 생성파일 생성
    윈도우의 경우 이렇게 생성된 실행파일의 확장자는 .exe가 된다.
    linux/max/unix의 경우 실행 권한을 가진 확장자 없이 실행파일이 생성된다.
2일차.png

c++ 프로그래밍
object-oriented programming
    캡슐화(encapsulation) 
        객체의 속성과 행위를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추어 은닉한다.
    
    정보의 은닉화(information hiding)
        은닉이라는 단어 때문에 캡슐화와 은닉화를 혼동하는 경우가 많은데,
        은닉화는 캡슐화를 통해 얻어지는 "실제 구현 내용 일부를 외부에 감추는" 효과이다.ㅣ
    
    %속성과 메서드를 감추는 것이 캡슐화이고 그 구현내용(어떻게 처리하냐까지)을 감추는게 은닉화
    
    상속(inheritance)
        parent의 method 혹은 field를 child class에게 상속해 주는 것이다
        즉 기존 class에 method를 추가하거나 재정의하여 새로운 class를 정의한다
        보통 3단계까지는 상속을 해준다? -> 디자인패턴에서 상속개념으로 내려가서 쓰인다
    
    다양성? 다형성?(polymorhism)
        하나의 객체에 여러 가지 타입을 대입할 수 있다는 것을 의미한다
        반대로, 단형성은 하나의 객체에 하나의 타입만 대응할 수 있다
    ?여러가지 타입을 만들어 낼수 있다는 개념? 오버로딩?

basic syntax of c++
    // or /*comment*/ 주석 (말그대로 주석)
      소스 코드 설명을 html 문서로 저장할 수 있는 doxygen type(/** *@~~ *~~ */) 주석을 권장한다.

    # #으로 시작하는 행은 전처리기에서 읽고 해석하는 지시문
      컴파일이 시작되기 전에 해석되는 특수 라인
    
    int main(void) 
      c/c++는 main 함수에서 실행이 시작 되기 때문에 반드시 있어야 하는 함수이다
    
    using namespace std;
        이름 공간에 있는 클래스(std)를 사용하겠다?
        std에는 cout, endl, cin 등 자주 쓰이는 함수들이 정의되어 있어서 이 namespace를 사용한다고 선언하면
        std::cout 대신에 cout이라고 사용 가능 
        단 버전이 바뀌면 충돌이 날수 있으므로 위험할수도 있다

    %void void는 "타입 없음"
        변수는 void 타입으로 정의할 수 없다.
        1.void writeValue(int x) 
            함수가 값을 반환하지 않음을 나타낸다.

        2.int getValue(void)
            함수가 매개 변수를 사용하지 않음을 나타낸다.

        3.void pointer
            자료형이 정해지지 않은 포인터
            void 포인터를 반환하면 자료형에 관계없이 값을 출력할 수 있다는 장점이 있다

    {} main 함수 정의의 시작과 끝을 나타낸다
       중괄호 내부의 내용은 C++ 문장으로 실제 동작을 지정하는 프로그램의 핵심이다
       모든 c/c++ 문장은 ;으로 끝난다(javascript와 다르게 C++에서는 반드시 써야한다)

    C++ variable(변수)
        변수란 데이터를 저장하기 위해 프로그램에 의해 이름을 받은 메모리 공간을 의미한다
        메모리 공간에 저장된 값은 변경될 수 있다
        숫자 표현에 관련된 변수는 정수형변수와 실수형 변수로 구분
        정수형 변수 char, int, long, longlong형 변수로 실수형은 float, double형 변수로 구분
        관련된 데이터를 한 번에 묶어서 처리하는 사용자 정의 구조체 변수도 있다는
    
    변수 이름 생성 규칙
        c++에서는 변수의 이름을 비교적 자유롭게 지을 수 있다.
        권장은 해당 변수에 저장될 데이터의 의미를 잘 나타내도록 짓는 것이 좋다
        변수의 이름을 생성할 때 반드시 지켜야하는 규칙
            1. 영문자(대소문자), 숫자, _(underscore)로만 구성된다
                단 _는 왠만하면 많이 쓰지 않는게 좋다
                c++는 대소문자 구분하므로 주의할것
            2. 변수의 이름은 숫자로 시작될 수 없다
            3. 변수의 이름 사이에는 공백을 포함할 수 없다
            4. c++에서 미리 정의된 키워드는 사용할 수 없다
            5. 변수 이름의 길이에 제한이 없다
    
    bit와 byte
        컴퓨터는 모든 data를 2진수(binary)로 표현하고 처리한다
        비트란 컴퓨터가 데이터를 처리하기 위해 사용하는 데이터의 최소 단위이다
        이러한 비트에는 2진수의 값(0과1)을 단 하나만 저장할 수 있다.
        바이트란 비트가 8개 모여서 구성되며, 한문자(character)를 표현할 수 있는 최소 단위
            알파벳기준

    variable과 memory address
        변수는 기본적으로 메모리의 주소를 기억하는 역할을 한다 -> 포인터(중요한 개념)
        메모리 주소란 물리적인 메모리 공간을 서로 구분하기 위해 사용되는 일종의 식별자(idendifier) 이다
        메모리 주소란 메모리 공간에서의 정확한 위치를 식별하기 위한 고유주소를 의미한다
            메모리를 할당하면 삭제도 해줘야한다? 관리?
        변수를 참조할 때는 메모리의 주소를 참조하는 것이 아닌, 해당 주소에 저장된 데이터를 참조하게 된다
        따라서 변수는 데이터가 저장된 메모리의 주소뿐만 아니라, 저장된 데이터의 길이와 형태에 관한 정보도 같이 기억해줘야 한다

        2일차2.png
        메모리상에 변수가 어떤 식으로 저장되는지 보여주는 그림
        하나의 메모리 공간에는 8개의 비트로 이루어진 1바이터의 데이터가 저장되어 있다
        해당 변수의 길이는 총 4개의 메모리 공간을 포함하므로, 해당 변수는 총 4바이트의 데이터를 저장하고 있는 것이다

    declaring variables (변수 선언)
        int : (123 또는 -123) 같이 소수 없이 정수형 변수를 저장
        double : 19.99같이 소수를 사용하여 부동 소수점 숫자를 저장한다
        char : a 또는 b 같은 단일 문자를 저장한다 char 값은 작은 따옴표로 묶는다
        string : hello 같은 텍스트를 저장한다 큰따옴표로 묶는다
        bool : true 또는 false의 두 가지 상태로 값을 저장한다

        int main(int argc, char* argv[]) (아규먼트 개수, 아규먼트 받을 배열?)

        변수를 선언하려면 유형을 지정하거나 값을 할당한다
        여기서 type은 C++ type 중에 하나이다.
        variableName은 변수의 이름이다
        등호는 변수에 값을 할당하는 데 사용하는 대입 연산자
            Syntax int num = 15; type과 초기화 하는게 권장
                int num;라고하면 초기화하라고 경고문구 뜸
        
        동일한 type의 변수를 둘 이상 선언하려면 , 로 구분하여 선언한다

        scope는 프로그램의 한 영역이며, 대체로 변수를 선언할 수 있는 세곳이 있다
            지역변수
                함수나 블록 내에서 선언된 변수는 지역 변수
                해당 함수 또는 코드 블록 내부에 있는 statements에서만 사용할수 있다
                지역변수는 외부에 있는 함수에서는 사용할수 없다
            형식 매개변수 
                
            전역변수
                전역변수는 일반적으로 프로그램의 맨 위에 있는 모든 함수 외부에서 정의된다
                전역 변수는 프로그램 수명 내내 그 값을 유지한다
                전역 변수는 모든 함수에서 access(접근)할 수 있다
                즉, 전역 변수는 선언 후 전체 프로그램에서 사용할 수 있다

                %지역변수와 전역변수의 이름이 동일할 경우 지역변수 값을 우선한다
